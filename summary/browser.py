from bs4 import BeautifulSoup
from getpass import getpass
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

import re
import time

class CBSBrowserSession:

    NPM_DRIVER_BINARY = "node_modules/geckodriver/bin/geckodriver"
    USERNAME_FIELD_CSS = "input#userid"
    PASSWORD_FIELD_CSS = "input#password"
    LOGIN_BUTTON_CSS = "input[type=submit]"

    def __init__(self, league_home, args):
        self._driver = webdriver.Firefox(executable_path=self.NPM_DRIVER_BINARY)
        self._league_home = league_home
        self._period = args.period
        if args.credentials:
            self._username = args.credentials[0]
            self._password = args.credentials[1]
        else:
            self._username = input("CBS Username: ")
            self._password = getpass()

    def _login(self):
        """
            It is expected that consumers of this class will call this method
            before attempting to load any league-specific CBS pages. While it
            is recommended you use this class in the manner documented on
            __enter__, callers may choose to log in on their own.

            This method throws an exception if login fails for any reason.
        """
        self._driver.get(self._league_home)
        self._get_by_css(self.USERNAME_FIELD_CSS).send_keys(self._username)
        self._get_by_css(self.PASSWORD_FIELD_CSS).send_keys(self._password)
        self._get_by_css(self.LOGIN_BUTTON_CSS).click()
        
        for i in range(0, 100):
            if self._driver.current_url.endswith("login=confirmed"):
                break
            time.sleep(0.1)
        else:
            raise Exception((
                    f"Failed to log in to {self._league_home} with"
                    f" credentials:\nUsername: {self._username}"
                    f"\nPassword: {self._password}"
            ))

    def _get_by_css(self, selector):
        return self._driver.find_element_by_css_selector(selector)

    def get_matchup_soups(self):
        """
            Returns a list of soups of the CBS scoreboard for each matchup on
            the scoreboard. No matchup should be repeated, and the soup
            returned is the full scoreboard soup, unlike the result of
            #get_position_leader_rows_soup below.

            The soups are generated by clicking on each of the matchup elements
            on the scoreboard to load the scoreboard for that matchup. Hovering
            your mouse over the webdriver-controlled browser or scrolling the
            page will result in strange, strange errors.
        """
        def load_matchup_soup(matchup_tag_id):
            self._get_by_css(f"table#{matchup_tag_id}").click()
            return self._get_current_soup()

        scoreboard = f"{self._league_home}/scoring/completed/{self._period}"
        self._driver.get(scoreboard)
        return [
                load_matchup_soup(tag["id"])
                for tag in (
                        self._get_current_soup()
                        .select("table[id^='matchup_hilite_']")
                )
        ]

    def _get_current_soup(self):
        return BeautifulSoup(self._driver.page_source, "html.parser")

    def get_position_leader_rows_soup(self, position, period):
        """
            Returns list of players (as the soup of an html table) who were
            eligible to start at the given position and period. This list is
            sorted by total points scored in the period in descending order.
        """
        self._driver.get((
                f"{self._league_home}/stats/data-stats-report"
                f"/all:{position}/period-{period}/standard"
                "/stats?print_rows=9999"
        ))
        return self._get_current_soup().select("tbody > tr[valign='top']")

    def __enter__(self):
        """
            The preferred way to use this class would be something like:

                with CBSBrowserSession(league_home, credentials) as browser:
                    ...
                    <do things with browser>

            This method of instatiating the class takes care of starting the
            Firefox instance and logging in to your league's CBS fantasy
            baseball homepage.
        """
        self._login()
        return self

    def __exit__(self, *args, **kwargs):
        self._driver.close()

